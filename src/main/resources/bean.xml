<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--把对象的创建交给spring来管理-->
    <!--&lt;!&ndash;唯一标志，创建对象的全限定类名&ndash;&gt;-->
    <!--<bean id="accountDao" class="com.sbl.dao.impl.AccountDaoImpl"></bean>-->



    <!--spring对bean的管理细节
        1. 创建Spring的三种方式
        2. bean对象的作用范围
        3. bean对象的生命周期
    -->

    <!--创建Bean的三种方式-->
    <!--第一种方式：使用默认构造函数创建。在Spring的配置文件中使用bean标签，配置id和class属性之后，且没有其它标签
                    且如果类中没有默认的构造函数，对象无法创建-->
    <!--<bean id="accountService" class="com.sbl.service.impl.AccountServiceImpl"></bean>-->

    <!-- 第二种方式： 使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）
  <bean id="instanceFactory" class="com.itheima.factory.InstanceFactory"></bean>
  <bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"></bean>
  -->

    <!-- 第三种方式：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器)
    <bean id="accountService" class="com.itheima.factory.StaticFactory" factory-method="getAccountService"></bean>
    -->

    <!-- bean的作用范围调整
        bean标签的scope属性：
            作用：用于指定bean的作用范围
            取值： 常用的就是单例的和多例的
                singleton：单例的（默认值）
                prototype：多例的
                request：作用于web应用的请求范围
                session：作用于web应用的会话范围
                global-session：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session

    <bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl" scope="prototype"></bean>
    -->

    <!-- bean对象的生命周期
            单例对象
                出生：当容器创建时对象出生
                活着：只要容器还在，对象一直活着
                死亡：容器销毁，对象消亡
                总结：单例对象的生命周期和容器相同
            多例对象
                出生：当我们使用对象时spring框架为我们创建
                活着：对象只要是在使用过程中就一直活着。
                死亡：当对象长时间不用，且没有别的对象引用时，由Java的垃圾回收器回收
     -->
    <!--<bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl"-->
          <!--scope="prototype" init-method="init" destroy-method="destroy"></bean>-->

    <!--spring中的依赖注入
        依赖注入：
            Dependency Injection
        Ioc作用：
            降低程序间的耦合（依赖关系）
        依赖关系的管理：
            以后都交给Spring来维护
         在当前类需要使用其它类对象的时候，由spring为我们提供，我们只需要在配置文件中说明依赖关系的维护
         依赖注入：
            能注入的的数据有三类：
                1. 基本类型和String
                2. 其它bean类型（在配置文件中或者注解配置过得bean）
                3. 复杂类型/集合类型
            注入的方式：
                1.使用构造函数提供
                2. 使用set方法提供
                3. 使用注解提供
    -->


    <!--构造函数注入：
        使用的标签:constructor-arg
        标签出现的位置：bean标签的内部
        标签中的属性
            type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型
            index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引的位置是从0开始
            name：用于指定给构造函数中指定名称的参数赋值                                        常用的
            =============以上三个用于指定给构造函数中哪个参数赋值===============================
            value：用于提供基本类型和String类型的数据
            ref：用于指定其他的bean类型数据。它指的就是在spring的Ioc核心容器中出现过的bean对象

        优势：
            在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功。
        弊端：
            改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供。
        ======一般不适用这种方式，而是使用set方法注入=======
    -->
    <!--<bean id="accountService" class="com.sbl.dao.impl.AccountDaoImpl">-->
        <!--<constructor-arg name="name" value="泰斯特"></constructor-arg>-->
        <!--<constructor-arg name="age" value="18"></constructor-arg>-->
        <!--<constructor-arg name="birthday" ref="now"></constructor-arg>-->
    <!--</bean>-->

    <!-- 配置一个日期对象 -->
    <bean id="now" class="java.util.Date"></bean>


    <!-- set方法注入                更常用的方式
     涉及的标签：property
     出现的位置：bean标签的内部
     如果有含参数构造方法，那么需要编写默认无参数构造方法
     标签的属性
         name：用于指定注入时所调用的set方法名称
         value：用于提供基本类型和String类型的数据
         ref：用于指定其他的bean类型数据。它指的就是在spring的Ioc核心容器中出现过的bean对象
     优势：
         创建对象时没有明确的限制，可以直接使用默认构造函数
     弊端：
         如果有某个成员必须有值，则获取对象是有可能set方法没有执行。
 -->
    <bean id="accountService2" class="com.sbl.dao.impl.AccountDaoImpl">
        <property name="name" value="TEST" ></property>
        <property name="age" value="21"></property>
        <property name="birthday" ref="now"></property>
    </bean>


    <!-- 复杂类型的注入/集合类型的注入
       用于给List结构集合注入的标签：
           list array set
       用于个Map结构集合注入的标签:
           map  props
       结构相同，标签可以互换
   -->
    <bean id="accountService3" class="com.sbl.service.impl.AccountServiceImpl">
        <property name="myStrs">
            <set>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </set>
        </property>

        <property name="myList">
            <array>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </array>
        </property>

        <!--也可以存放自定义类型-->
        <property name="mySet">
            <list>
                <ref bean="now"></ref>
            </list>
        </property>

        <property name="myMap">
            <props>
                <prop key="testC">ccc</prop>
                <prop key="testD">ddd</prop>
            </props>
        </property>

        <property name="myProps">
            <map>
                <entry key="testA" value="aaa"></entry>
                <entry key="testB">
                    <value>BBB</value>
                </entry>
            </map>
        </property>
    </bean>
</beans>